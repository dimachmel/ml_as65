# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eTC840RXYB2GlYw4opcxL_FOg1lhFltM
"""

from google.colab import files
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
import io

pd.set_option('display.max_columns', None)
plt.rcParams['figure.figsize'] = (10, 6)
plt.style.use('seaborn-v0_8-whitegrid')

print("АНАЛИЗ ДАННЫХ IRIS")

uploaded = files.upload()

#читаем данные
file_name = list(uploaded.keys())[0]
df = pd.read_csv(io.BytesIO(uploaded[file_name]))

print(df.head(50))

print("\nПроверка пропущенных значений:")
missing_values = df.isnull().sum()
print(missing_values)

print("\nОсновные статистические характеристики:")
print(df.describe())

print("\n" + "=" * 60)
print("2. КОЛИЧЕСТВО ОБРАЗЦОВ КАЖДОГО ВИДА ИРИСА")
print("-" * 50)

species_count = df['variety'].value_counts()
print("Количество образцов по видам:")
print(species_count)

print("Построение парных диаграмм рассеяния")

# Создание pair plot
sns.pairplot(df, hue='variety', palette='viridis', diag_kind='hist', height=2.5)
plt.suptitle('Парные диаграммы рассеяния для признаков ирисов', y=1.02)
plt.tight_layout()
plt.show()

#Средние значения по каждому признаку для каждого вида
print("4. СРЕДНИЕ ЗНАЧЕНИЯ ПО ПРИЗНАКАМ ДЛЯ КАЖДОГО ВИДА")

numeric_columns = ['sepal.length', 'sepal.width', 'petal.length', 'petal.width']

mean_by_species = df.groupby('variety')[numeric_columns].mean()
std_by_species = df.groupby('variety')[numeric_columns].std()

print("Средние значения по видам:")
print(mean_by_species)

print("\nСтандартные отклонения по видам:")
print(std_by_species)

print("5. ЯЩИК С УСАМИ ДЛЯ PETAL LENGTH")

plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x='variety', y='petal.length', palette='Set2')
plt.title('Распределение длины лепестка по видам ирисов')
plt.xlabel('Вид ириса')
plt.ylabel('Длина лепестка (см)')
plt.grid(axis='y', alpha=0.3)
plt.tight_layout()
plt.show()

petal_stats = df.groupby('variety')['petal.length'].describe()
print(petal_stats)

# 6. СТАНДАРТИЗАЦИЯ ДАННЫХ
print("\n6. СТАНДАРТИЗАЦИЯ ДАННЫХ")
print("-" * 50)

numeric_columns = ['sepal.length', 'sepal.width', 'petal.length', 'petal.width']

# Сохраняем исходные данные
original_data = df[numeric_columns].copy()

# Стандартизация
scaler = StandardScaler()
df_standardized = df.copy()
df_standardized[numeric_columns] = scaler.fit_transform(df[numeric_columns])

print("Результат стандартизации:")
print("─" * 60)
for col in numeric_columns:
    orig_mean, orig_std = original_data[col].mean(), original_data[col].std()
    std_mean, std_std = df_standardized[col].mean(), df_standardized[col].std()
    print(f"{col:15} | μ: {orig_mean:6.2f} → {std_mean:7.2f} | σ: {orig_std:5.2f} → {std_std:5.2f}")

# Визуализация до и после стандартизации
print("\n7. ВИЗУАЛИЗАЦИЯ СТАНДАРТИЗАЦИИ")
print("-" * 50)

fig, axes = plt.subplots(2, 4, figsize=(16, 8))

for i, col in enumerate(numeric_columns):
    # До стандартизации
    axes[0, i].hist(original_data[col], alpha=0.7, color='skyblue', bins=15,
                   edgecolor='black', density=True)
    axes[0, i].set_title(f'ДО: {col}')
    axes[0, i].set_xlabel('Сантиметры')
    axes[0, i].axvline(original_data[col].mean(), color='red', linestyle='--',
                      linewidth=2, label=f'μ={original_data[col].mean():.2f}')
    axes[0, i].legend()

    # После стандартизации
    axes[1, i].hist(df_standardized[col], alpha=0.7, color='lightcoral', bins=15,
                   edgecolor='black', density=True)
    axes[1, i].set_title(f'ПОСЛЕ: {col}')
    axes[1, i].set_xlabel('Стандартные отклонения')
    axes[1, i].axvline(df_standardized[col].mean(), color='red', linestyle='--',
                      linewidth=2, label=f'μ={df_standardized[col].mean():.2f}')
    axes[1, i].legend()

plt.tight_layout()
plt.show()